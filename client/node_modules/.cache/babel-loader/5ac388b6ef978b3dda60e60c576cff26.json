{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Downloads\\\\capstone\\\\schaeffler\\\\client\\\\src\\\\Mapping.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Mapping() {\n  _s();\n\n  const canvas = useRef();\n  const imgRef = useRef();\n  const canvasWidth = 1000;\n  const canvasHeight = 900;\n  const racks = 9;\n  const rows = 16;\n  let cellSide = 20;\n\n  function zeros(dimensions) {\n    var array = [];\n\n    for (var i = 0; i < dimensions[0]; ++i) {\n      array.push(dimensions.length == 1 ? 0 : zeros(dimensions.slice(1)));\n    }\n\n    return array;\n  }\n\n  const draw = context => {\n    context.drawImage(imgRef.current, 10, 10, imgRef.current.width, imgRef.current.height);\n\n    for (let i = 0; i < zeros([racks, rows]).length; i++) {\n      for (let j = 0; j < zeros([racks, rows])[i].length; j++) {\n        let x = j * 55 + 38;\n        let y = i * 20 + 55;\n        let count = 110;\n        let cellColor = 'rgba(255, 0, 0, 0)';\n\n        if (i % 2 === 0 && j % 2 === 0) {\n          cellColor = '#f1c40f';\n        }\n\n        if (i !== 0 && i !== 1) {\n          y = i * 20 + count;\n          count += 60;\n\n          if (i !== 2 && i !== 3) {\n            y = i * 20 + count;\n            count += 60;\n\n            if (i !== 4 && i !== 5) {\n              y = i * 20 + count;\n              count += 60;\n\n              if (i === 8) {\n                y = i * 20 + count;\n              }\n            }\n          }\n        }\n\n        context.beginPath();\n        context.fillStyle = cellColor;\n        context.fillRect(x, y, cellSide, cellSide);\n      }\n    }\n  };\n\n  const handleOnLoad = () => {\n    const context = canvas.current.getContext(\"2d\");\n    draw(context);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mapping\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvas,\n      width: canvasWidth,\n      height: canvasHeight\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      ref: imgRef,\n      src: \"mapping.png\",\n      alt: \"mapping\",\n      className: \"mapping-img\",\n      onLoad: handleOnLoad\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: \"drone.png\",\n      alt: \"d\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Mapping, \"al8xOoonljcUj961N2xaTZAf1ls=\");\n\n_c = Mapping;\n\nvar _c;\n\n$RefreshReg$(_c, \"Mapping\");","map":{"version":3,"sources":["C:/Users/Admin/Downloads/capstone/schaeffler/client/src/Mapping.js"],"names":["React","useRef","useEffect","Mapping","canvas","imgRef","canvasWidth","canvasHeight","racks","rows","cellSide","zeros","dimensions","array","i","push","length","slice","draw","context","drawImage","current","width","height","j","x","y","count","cellColor","beginPath","fillStyle","fillRect","handleOnLoad","getContext"],"mappings":"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","sourcesContent":["import React,{useRef,useEffect} from 'react'\r\n\r\nexport default function Mapping() {\r\n\r\n      const canvas = useRef()\r\n      const imgRef = useRef()\r\n      const canvasWidth = 1000\r\n      const canvasHeight = 900\r\n      const racks = 9\r\n      const rows = 16\r\n      let cellSide = 20\r\n    \r\n      function zeros(dimensions) {\r\n        var array = []\r\n    \r\n        for (var i = 0; i < dimensions[0]; ++i) {\r\n            array.push(dimensions.length == 1 ? 0 : zeros(dimensions.slice(1)));\r\n        }\r\n    \r\n        return array\r\n    }\r\n\r\n    const draw = (context) => {\r\n        context.drawImage(imgRef.current, 10, 10,imgRef.current.width, imgRef.current.height)\r\n        for (let i = 0; i < zeros([racks,rows]).length; i++) {    \r\n            for (let j = 0; j < zeros([racks,rows])[i].length; j++) {\r\n                let x = j * 55 + 38\r\n                let y = i * 20 + 55\r\n                let count = 110\r\n\r\n                let cellColor = 'rgba(255, 0, 0, 0)'    \r\n\r\n                if (i % 2 === 0 && j % 2 === 0) {\r\n                    cellColor = '#f1c40f'\r\n                }\r\n               \r\n                if (i !== 0 && i !== 1){\r\n                    y = i * 20 + count\r\n                    count += 60\r\n                    if(i !== 2 && i !== 3){\r\n                        y = i * 20 + count\r\n                        count += 60\r\n                        if (i !== 4 && i !== 5){\r\n                            y = i * 20 + count\r\n                            count += 60\r\n                            if (i === 8){\r\n                                y = i * 20 + count\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                context.beginPath()\r\n                context.fillStyle = cellColor\r\n                context.fillRect(x, y, cellSide, cellSide)\r\n            }\r\n        }\r\n    }\r\n    \r\n    const handleOnLoad = () => {\r\n        const context = canvas.current.getContext(\"2d\")\r\n        draw(context)\r\n    }\r\n\r\n    return (\r\n        <div className=\"mapping\">\r\n            <canvas ref={canvas} width={canvasWidth} height={canvasHeight} />\r\n            <img ref={imgRef} src=\"mapping.png\" alt=\"mapping\" className=\"mapping-img\" onLoad={handleOnLoad}/>\r\n            <img src=\"drone.png\" alt=\"d\" />\r\n        </div>        \r\n    )\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}