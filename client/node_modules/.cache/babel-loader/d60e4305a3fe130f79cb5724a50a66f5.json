{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: !0\n}), exports.sumArrayTill = sumArrayTill, exports.calculateSegmentStops = calculateSegmentStops, exports.calculateNeedleHeight = calculateNeedleHeight, exports.calculateSegmentLabelCount = calculateSegmentLabelCount, exports.calculateScale = calculateScale, exports.calculateTicks = calculateTicks, exports.formatCurrentValueText = formatCurrentValueText, exports.deg2rad = deg2rad, exports.centerTranslation = centerTranslation, exports.getRadius = getRadius;\n\nvar _isNumber2 = _interopRequireDefault(require(\"lodash-es/isNumber\")),\n    _sum2 = _interopRequireDefault(require(\"lodash-es/sum\")),\n    _isEmpty = _interopRequireDefault(require(\"lodash-es/isEmpty\")),\n    _isArray = _interopRequireDefault(require(\"lodash-es/isArray\")),\n    _head2 = _interopRequireDefault(require(\"lodash-es/head\")),\n    _last2 = _interopRequireDefault(require(\"lodash-es/last\")),\n    _drop2 = _interopRequireDefault(require(\"lodash-es/drop\")),\n    _times2 = _interopRequireDefault(require(\"lodash-es/times\")),\n    _take2 = _interopRequireDefault(require(\"lodash-es/take\")),\n    _d = require(\"d3\");\n\nfunction sumArrayTill(a, b) {\n  return (0, _sum2[\"default\"])((0, _take2[\"default\"])(a, b));\n}\n\nfunction calculateSegmentStops(a) {\n  var b = a.tickData,\n      c = a.customSegmentStops,\n      d = a.min,\n      e = a.max;\n  if (!(0, _isArray[\"default\"])(c) || (0, _isEmpty[\"default\"])(c)) return b;\n  if ((0, _head2[\"default\"])(c) !== d) throw new Error(\"First value should be equivalent to min value given. Current min value - \".concat(d));\n  if ((0, _last2[\"default\"])(c) !== e) throw new Error(\"Last value should be equivalent to max value given. Current min value - \".concat(e));\n  var f = c.map(function (a, b) {\n    return 0 === b ? void 0 : (a - c[b - 1]) / (e - d);\n  });\n  return (0, _drop2[\"default\"])(f);\n}\n\nfunction calculateNeedleHeight(a) {\n  var b = a.heightRatio,\n      c = a.radius;\n  if (0 > b || 1 < b) throw new Error(\"Invalid needleHeightRatio given - \".concat(b));\n  return Math.round(c * b);\n}\n\nfunction calculateSegmentLabelCount(a) {\n  var b = a.maxSegmentLabelCount,\n      c = a.segmentCount,\n      d = parseInt(b, 10),\n      e = parseInt(c, 10);\n  return (0, _isNumber2[\"default\"])(d) && 0 <= d && d <= e ? d : e;\n}\n\nfunction calculateScale(a) {\n  var b = a.min,\n      c = a.max,\n      d = a.segments;\n  return (0, _d.scaleLinear)().range([0, 1]).domain([b, c]);\n}\n\nfunction calculateTicks(a, b) {\n  var c = b.min,\n      d = b.max,\n      e = b.segments,\n      f = [];\n  f = a.ticks(e);\n  var g = ((0, _last2[\"default\"])(f) !== d || e < f.length) && 1 < f.length;\n\n  if (g) {\n    f = [c], (0, _times2[\"default\"])(e, function (a) {\n      f.push(c + (a + 1) * ((d - c) / e));\n    });\n  }\n\n  return 1 === f.length && (f = [c, d]), f;\n}\n\nfunction formatCurrentValueText(a, b) {\n  var c = b.labelFormat(a),\n      d = b.currentValuePlaceholderStyle;\n  return b.currentValueText.replace(d, c);\n}\n\nfunction deg2rad(a) {\n  return a * Math.PI / 180;\n}\n\nfunction centerTranslation(a, b, c) {\n  return \"translate(\".concat(a + b, \", \").concat(a + c, \")\");\n}\n\nfunction getRadius(a) {\n  return a.width / 2;\n}","map":null,"metadata":{},"sourceType":"script"}