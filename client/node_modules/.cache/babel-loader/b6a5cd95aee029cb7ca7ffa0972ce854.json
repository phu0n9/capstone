{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport Pusher from 'pusher-js';\nimport { useAuth0 } from '@auth0/auth0-react';\n\nrequire('dotenv').config();\n\nexport default function InfinityScroll({\n  pageNumber,\n  keyword\n}) {\n  _s();\n\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  const [inventory, setInventory] = useState([]);\n  const [hasMore, setHasMore] = useState(false);\n  const heroku = 'https://schaeffler.herokuapp.com/';\n  const {\n    isAuthenticated,\n    getAccessTokenSilently\n  } = useAuth0(); // 'http://localhost:5000/inventory'\n\n  useEffect(() => {\n    async function fetchApi(URL, paramsDict) {\n      if (isAuthenticated) {\n        const token = await getAccessTokenSilently();\n        await axios({\n          method: 'GET',\n          url: URL,\n          params: paramsDict,\n          headers: {\n            authorization: `Bearer ${token}`\n          }\n        }).then(res => {\n          setInventory(() => {\n            return [...new Set([...'', ...res.data.map(i => i)])];\n          });\n        }).catch(e => {\n          setError(true);\n          console.log('Error: ' + e);\n        });\n      }\n    }\n\n    const pusher = new Pusher(process.env.REACT_APP_PUSHER_KEY, {\n      'cluster': process.env.REACT_APP_PUSHER_CLUSTER,\n      forceTLS: true\n    });\n    const channel = pusher.subscribe('tasks');\n    channel.bind('inserted', function () {\n      fetchApi('http://localhost:5000/inventory', {\n        page: 5,\n        keyword: keyword\n      }); //change here\n      // fetchApi(heroku+'inventory',{page:5}) //change here\n    });\n    return () => channel.unbind('inserted');\n  }, [isAuthenticated, getAccessTokenSilently]);\n  useEffect(() => {\n    async function getPages() {\n      if (isAuthenticated) {\n        const token = await getAccessTokenSilently();\n        await axios({\n          method: 'GET',\n          url: 'http://localhost:5000/inventory',\n          //change here\n          // url: heroku+'inventory', //change here\n          params: {\n            page: pageNumber\n          },\n          headers: {\n            authorization: `Bearer ${token}`\n          }\n        }).then(res => {\n          setInventory(prevInventory => {\n            return [...new Set([...prevInventory, ...res.data.map(i => i)])];\n          });\n          setHasMore(res.data.length > 0);\n          setLoading(false);\n        }).catch(e => {\n          setError(true);\n          console.log('Error: ' + e);\n        });\n      }\n    }\n\n    setLoading(true);\n    setError(false);\n    getPages();\n  }, [pageNumber, isAuthenticated, getAccessTokenSilently]);\n  return {\n    loading,\n    hasMore,\n    error,\n    inventory\n  };\n}\n\n_s(InfinityScroll, \"B/uXfFjXsBNgDvJDwZHPDM9VIwY=\", false, function () {\n  return [useAuth0];\n});\n\n_c = InfinityScroll;\n\nvar _c;\n\n$RefreshReg$(_c, \"InfinityScroll\");","map":{"version":3,"sources":["C:/Users/Admin/Downloads/capstone/schaeffler/client/src/InfinityScroll.js"],"names":["useEffect","useState","axios","Pusher","useAuth0","require","config","InfinityScroll","pageNumber","keyword","loading","setLoading","error","setError","inventory","setInventory","hasMore","setHasMore","heroku","isAuthenticated","getAccessTokenSilently","fetchApi","URL","paramsDict","token","method","url","params","headers","authorization","then","res","Set","data","map","i","catch","e","console","log","pusher","process","env","REACT_APP_PUSHER_KEY","REACT_APP_PUSHER_CLUSTER","forceTLS","channel","subscribe","bind","page","unbind","getPages","prevInventory","length"],"mappings":"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","sourcesContent":["import {useEffect,useState} from 'react'\r\nimport axios from 'axios'\r\nimport Pusher from 'pusher-js'\r\nimport {useAuth0} from '@auth0/auth0-react'\r\nrequire('dotenv').config()\r\n\r\nexport default function InfinityScroll({pageNumber,keyword}) {\r\n    const [loading,setLoading] = useState(true)\r\n    const [error,setError] = useState(false)\r\n    const [inventory,setInventory] = useState([])\r\n    const [hasMore,setHasMore] = useState(false)       \r\n    const heroku = 'https://schaeffler.herokuapp.com/'\r\n    const {isAuthenticated,getAccessTokenSilently} = useAuth0()\r\n\r\n   \r\n    // 'http://localhost:5000/inventory'\r\n    useEffect(() =>{\r\n        async function fetchApi(URL,paramsDict){\r\n            if(isAuthenticated){\r\n                const token = await getAccessTokenSilently()\r\n                await axios({\r\n                    method:'GET',\r\n                    url: URL,\r\n                    params:paramsDict,\r\n                    headers: {\r\n                        authorization:`Bearer ${token}`\r\n                    }\r\n                })\r\n                .then(res => {\r\n                    setInventory(() =>{\r\n                        return [...new Set([...'',...res.data.map(i => i)])]\r\n                    })\r\n                })\r\n                .catch(e =>{\r\n                    setError(true)\r\n                    console.log('Error: '+e)\r\n                })\r\n            }\r\n        }    \r\n        const pusher = new Pusher(process.env.REACT_APP_PUSHER_KEY,{\r\n            'cluster':process.env.REACT_APP_PUSHER_CLUSTER,\r\n            forceTLS: true,\r\n        })\r\n        const channel = pusher.subscribe('tasks')\r\n        channel.bind('inserted',function(){\r\n            fetchApi('http://localhost:5000/inventory',{page:5,keyword:keyword}) //change here\r\n            // fetchApi(heroku+'inventory',{page:5}) //change here\r\n        })\r\n        return () => channel.unbind('inserted')\r\n    },[isAuthenticated,getAccessTokenSilently])\r\n\r\n    useEffect(() =>{\r\n        async function getPages(){\r\n            if(isAuthenticated){\r\n                const token = await getAccessTokenSilently()\r\n                await axios({\r\n                    method:'GET',\r\n                    url: 'http://localhost:5000/inventory', //change here\r\n                    // url: heroku+'inventory', //change here\r\n                    params:{page:pageNumber},\r\n                    headers:{\r\n                        authorization:`Bearer ${token}`\r\n                    }\r\n                })\r\n                .then(res => {\r\n                    setInventory(prevInventory =>{\r\n                        return [...new Set([...prevInventory,...res.data.map(i => i)])]\r\n                    })\r\n                        setHasMore(res.data.length > 0)\r\n                        setLoading(false)\r\n                })\r\n                .catch(e =>{\r\n                    setError(true)\r\n                    console.log('Error: '+e)\r\n                })\r\n            }\r\n        }\r\n        setLoading(true)\r\n        setError(false)\r\n        getPages()\r\n    },[pageNumber,isAuthenticated,getAccessTokenSilently])\r\n\r\n    return {loading,hasMore,error,inventory}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}