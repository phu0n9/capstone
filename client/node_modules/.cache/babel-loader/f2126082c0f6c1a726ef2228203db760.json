{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport Pusher from 'pusher-js';\nexport default function InfinityScroll(pageNumber) {\n  _s();\n\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  const [inventory, setInventory] = useState([]);\n  const [hasMore, setHasMore] = useState(false);\n  const [change, setChange] = useState(false);\n  useEffect(() => {\n    const pusher = new Pusher('2ccb32686bdc0f96f50a', {\n      'cluster': 'ap1',\n      encrypted: true\n    });\n    const channel = pusher.subscribe('tasks');\n    channel.bind('inserted', function () {\n      // setChange(true)\n      setLoading(true);\n      setError(false);\n      axios({\n        method: 'GET',\n        url: 'http://localhost:5000/inventory?'\n      }).then(res => {\n        setInventory(() => {\n          return [...new Set([...inventory, ...res.data.map(i => i)])];\n        });\n        setHasMore(res.data.length > 0);\n        setLoading(false);\n      }).catch(e => {\n        setError(true);\n        console.log('Error: ' + e);\n      });\n    });\n    return () => channel.unbind('inserted');\n  }, [inventory]);\n\n  const refresh = () => {\n    setLoading(true);\n    setError(false);\n    setChange(false);\n    axios({\n      method: 'GET',\n      url: 'http://localhost:5000/inventory',\n      params: {\n        page: pageNumber\n      }\n    }).then(res => {\n      setInventory(prevInventory => {\n        return [...new Set([...prevInventory, ...res.data.map(i => i)])];\n      });\n      setHasMore(res.data.length > 0);\n      setLoading(false);\n    }).catch(e => {\n      setError(true);\n      console.log('Error: ' + e);\n    });\n  };\n\n  useEffect(refresh, [pageNumber]);\n  return {\n    loading,\n    hasMore,\n    error,\n    inventory,\n    change\n  };\n}\n\n_s(InfinityScroll, \"+2JB6wReExFct3CKyx6vVQwLL5A=\");\n\n_c = InfinityScroll;\n\nvar _c;\n\n$RefreshReg$(_c, \"InfinityScroll\");","map":{"version":3,"sources":["C:/Users/Admin/Downloads/capstone/schaeffler/client/src/InfinityScroll.js"],"names":["React","useEffect","useState","axios","Pusher","InfinityScroll","pageNumber","loading","setLoading","error","setError","inventory","setInventory","hasMore","setHasMore","change","setChange","pusher","encrypted","channel","subscribe","bind","method","url","then","res","Set","data","map","i","length","catch","e","console","log","unbind","refresh","params","page","prevInventory"],"mappings":"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","sourcesContent":["import React,{useEffect,useState} from 'react'\r\nimport axios from 'axios'\r\nimport Pusher from 'pusher-js'\r\n\r\nexport default function InfinityScroll(pageNumber) {\r\n    const [loading,setLoading] = useState(true)\r\n    const [error,setError] = useState(false)\r\n    const [inventory,setInventory] = useState([])\r\n    const [hasMore,setHasMore] = useState(false)       \r\n    const [change,setChange] = useState(false)\r\n    \r\n    useEffect(() =>{\r\n        const pusher = new Pusher('2ccb32686bdc0f96f50a',{\r\n            'cluster':'ap1',\r\n            encrypted:true\r\n        })\r\n        const channel = pusher.subscribe('tasks')\r\n        channel.bind('inserted',function(){\r\n            // setChange(true)\r\n            setLoading(true)\r\n            setError(false)\r\n            axios({\r\n                method:'GET',\r\n                url: 'http://localhost:5000/inventory?',\r\n            })\r\n            .then(res => {\r\n                setInventory(() =>{\r\n                    return [...new Set([...inventory,...res.data.map(i => i)])]\r\n                })\r\n                setHasMore(res.data.length > 0)\r\n                setLoading(false)\r\n            })\r\n            .catch(e =>{\r\n                setError(true)\r\n                console.log('Error: '+e)\r\n            })\r\n        })\r\n        return () => channel.unbind('inserted')\r\n    },[inventory])\r\n\r\n    const refresh = () =>{\r\n        setLoading(true)\r\n        setError(false)\r\n        setChange(false)\r\n        axios({\r\n            method:'GET',\r\n            url: 'http://localhost:5000/inventory',\r\n            params:{page:pageNumber}\r\n        })\r\n        .then(res => {\r\n            setInventory(prevInventory =>{\r\n                return [...new Set([...prevInventory,...res.data.map(i => i)])]\r\n            })\r\n            setHasMore(res.data.length > 0)\r\n            setLoading(false)\r\n        })\r\n        .catch(e =>{\r\n            setError(true)\r\n            console.log('Error: '+e)\r\n        })\r\n    }\r\n\r\n    useEffect((refresh),[pageNumber])\r\n\r\n    return {loading,hasMore,error,inventory,change}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}