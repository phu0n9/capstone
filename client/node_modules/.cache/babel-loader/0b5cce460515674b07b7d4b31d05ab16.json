{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: !0\n}), exports._renderLabels = _renderLabels, exports.render = exports.update = void 0;\n\nvar _d = require(\"d3\"),\n    _isEmpty = _interopRequireDefault(require(\"lodash-es/isEmpty\")),\n    _isArray = _interopRequireDefault(require(\"lodash-es/isArray\")),\n    _util = require(\"../util\"),\n    _getNeedleTransition = require(\"../util/get-needle-transition\"),\n    _configure = require(\"../config/configure\"),\n    update = function (a) {\n  var b = a.d3_refs,\n      c = a.newValue,\n      d = a.config,\n      e = (0, _configure.configureScale)(d),\n      f = e(c),\n      g = d.maxAngle - d.minAngle,\n      h = d.minAngle + f * g;\n  b.pointer.transition().duration(d.needleTransitionDuration).ease((0, _getNeedleTransition.getNeedleTransition)(d.needleTransition)).attr(\"transform\", \"rotate(\".concat(h, \")\")), b.current_value_text.text((0, _util.formatCurrentValueText)(c, d));\n};\n\nexports.update = update;\n\nvar render = function (a) {\n  var b = a.container,\n      c = a.config,\n      d = (0, _util.getRadius)(c),\n      e = (0, _util.centerTranslation)(d, c.paddingHorizontal, c.paddingVertical),\n      f = _renderSVG({\n    container: b,\n    config: c\n  });\n\n  return _renderArcs({\n    config: c,\n    svg: f,\n    centerTx: e\n  }), _renderLabels({\n    config: c,\n    svg: f,\n    centerTx: e,\n    r: d\n  }), {\n    current_value_text: _renderCurrentValueText({\n      config: c,\n      svg: f\n    }),\n    pointer: _renderNeedle({\n      config: c,\n      svg: f,\n      r: d,\n      centerTx: e\n    })\n  };\n};\n\nexports.render = render;\n\nfunction _renderSVG(a) {\n  var b = a.container,\n      c = a.config,\n      d = c.width + 2 * c.paddingHorizontal,\n      e = c.height + 2 * c.paddingVertical;\n  return (0, _d.select)(b).append(\"svg:svg\").attr(\"class\", \"speedometer\").attr(\"width\", \"\".concat(d).concat(c.dimensionUnit)).attr(\"height\", \"\".concat(e).concat(c.dimensionUnit)).style(\"width\", \"\".concat(d).concat(c.dimensionUnit)).style(\"height\", \"\".concat(e).concat(c.dimensionUnit));\n}\n\nfunction _renderArcs(a) {\n  var b = a.config,\n      c = a.svg,\n      d = a.centerTx,\n      e = (0, _configure.configureTickData)(b),\n      f = (0, _configure.configureArc)(b),\n      g = c.append(\"g\").attr(\"class\", \"arc\").attr(\"transform\", d);\n  g.selectAll(\"path\").data(e).enter().append(\"path\").attr(\"class\", \"speedo-segment\").attr(\"fill\", function (a, c) {\n    return !(0, _isEmpty[\"default\"])(b.segmentColors) && b.segmentColors[c] ? b.segmentColors[c] : b.arcColorFn(a * c);\n  }).attr(\"d\", f);\n}\n\nfunction _renderLabels(a) {\n  var b = a.config,\n      c = a.svg,\n      d = a.centerTx,\n      e = a.r,\n      f = (0, _configure.configureTicks)(b),\n      g = (0, _configure.configureTickData)(b),\n      h = (0, _configure.configureScale)(b),\n      j = b.maxAngle - b.minAngle,\n      k = b.customSegmentLabels,\n      l = (0, _isArray[\"default\"])(k) && !(0, _isEmpty[\"default\"])(k),\n      m = l && k.length === g.length;\n  if (l && !m) throw new Error(\"Custom Segment Labels should be an array with length of \".concat(g.length));\n  if (l && m) return void _renderCustomSegmentLabels({\n    config: b,\n    svg: c,\n    centerTx: d,\n    r: e,\n    ticks: f,\n    tickData: g,\n    scale: h,\n    range: j\n  });\n  var n = c.append(\"g\").attr(\"class\", \"label\").attr(\"transform\", d);\n  n.selectAll(\"text\").data(f).enter().append(\"text\").attr(\"transform\", function (a, c) {\n    var d = 0 === b.customSegmentStops.length ? h(a) : (0, _util.sumArrayTill)(g, c),\n        f = b.minAngle + d * j;\n    return \"rotate(\".concat(f, \") translate(0, \").concat(b.labelInset - e, \")\");\n  }).text(b.labelFormat).attr(\"class\", \"segment-value\").style(\"text-anchor\", \"middle\").style(\"font-size\", b.labelFontSize).style(\"font-weight\", \"bold\").style(\"fill\", b.textColor);\n}\n\nfunction _renderCustomSegmentLabels(a) {\n  function b(a, b) {\n    var d = 0 === l.length ? j(a) : (0, _util.sumArrayTill)(h, b),\n        e = c.minAngle + d * k;\n    return e;\n  }\n\n  var c = a.config,\n      d = a.svg,\n      e = a.centerTx,\n      f = a.r,\n      g = a.ticks,\n      h = a.tickData,\n      j = a.scale,\n      k = a.range,\n      l = c.customSegmentStops,\n      m = c.customSegmentLabels,\n      n = m.map(function (a, c) {\n    var d = c,\n        e = c + 1,\n        f = g[d],\n        h = b(f, d),\n        i = g[e],\n        j = b(i, e);\n    return (j + h) / 2;\n  }),\n      o = f - c.ringWidth - c.ringInset,\n      p = f - c.ringInset,\n      q = d.append(\"g\").attr(\"class\", \"label\").attr(\"transform\", e);\n  q.selectAll(\"text\").data(m).enter().append(\"text\").attr(\"transform\", function (a, b) {\n    var d = n[b],\n        e = \"rotate(\".concat(d, \") translate(0, \").concat(c.labelInset - f, \")\"),\n        g = \"rotate(\".concat(d, \") translate(0, \").concat(c.labelInset / 2 - (p - (p - o) / 2), \")\");\n    return \"OUTSIDE\" === a.position ? e : g;\n  }).text(function (a) {\n    return a.text || \"\";\n  }).attr(\"class\", \"segment-value\").style(\"text-anchor\", \"middle\").style(\"font-size\", function (a) {\n    return a.fontSize || c.labelFontSize;\n  }).style(\"font-weight\", \"bold\").style(\"fill\", function (a) {\n    return a.color || c.textColor;\n  });\n}\n\nfunction _renderCurrentValueText(a) {\n  var b = a.config,\n      c = a.svg,\n      d = (b.width + 2 * b.paddingHorizontal) / 2,\n      e = (b.width + 4 * b.paddingVertical) / 2;\n  return c.append(\"g\").attr(\"transform\", \"translate(\".concat(d, \", \").concat(e, \")\")).append(\"text\").attr(\"class\", \"current-value\").attr(\"text-anchor\", \"middle\").attr(\"y\", 23).text(b.currentValue).style(\"font-size\", b.valueTextFontSize).style(\"font-weight\", b.valueTextFontWeight).style(\"fill\", b.textColor);\n}\n\nfunction _renderNeedle(a) {\n  var b = a.config,\n      c = a.svg,\n      d = a.r,\n      e = a.centerTx,\n      f = (0, _util.calculateNeedleHeight)({\n    heightRatio: b.needleHeightRatio,\n    radius: d\n  }),\n      g = [[b.pointerWidth / 2, 0], [0, -f], [-(b.pointerWidth / 2), 0], [0, b.pointerTailLength], [b.pointerWidth / 2, 0]],\n      h = (0, _d.line)().curve(_d.curveMonotoneX),\n      i = c.append(\"g\").data([g]).attr(\"class\", \"pointer\").attr(\"transform\", e).style(\"fill\", b.needleColor);\n  return i.append(\"path\").attr(\"d\", h).attr(\"transform\", \"rotate(\".concat(b.minAngle, \")\"));\n}","map":null,"metadata":{},"sourceType":"script"}