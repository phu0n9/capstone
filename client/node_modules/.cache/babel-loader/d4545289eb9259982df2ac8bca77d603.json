{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StrictEventEmitter = void 0;\n\nconst Emitter = require(\"component-emitter\");\n/**\r\n * Strictly typed version of an `EventEmitter`. A `TypedEventEmitter` takes type\r\n * parameters for mappings of event names to event data types, and strictly\r\n * types method calls to the `EventEmitter` according to these event maps.\r\n *\r\n * @typeParam ListenEvents - `EventsMap` of user-defined events that can be\r\n * listened to with `on` or `once`\r\n * @typeParam EmitEvents - `EventsMap` of user-defined events that can be\r\n * emitted with `emit`\r\n * @typeParam ReservedEvents - `EventsMap` of reserved events, that can be\r\n * emitted by socket.io with `emitReserved`, and can be listened to with\r\n * `listen`.\r\n */\n\n\nclass StrictEventEmitter extends Emitter {\n  /**\r\n   * Adds the `listener` function as an event listener for `ev`.\r\n   *\r\n   * @param ev Name of the event\r\n   * @param listener Callback function\r\n   */\n  on(ev, listener) {\n    super.on(ev, listener);\n    return this;\n  }\n  /**\r\n   * Adds a one-time `listener` function as an event listener for `ev`.\r\n   *\r\n   * @param ev Name of the event\r\n   * @param listener Callback function\r\n   */\n\n\n  once(ev, listener) {\n    super.once(ev, listener);\n    return this;\n  }\n  /**\r\n   * Emits an event.\r\n   *\r\n   * @param ev Name of the event\r\n   * @param args Values to send to listeners of this event\r\n   */\n\n\n  emit(ev, ...args) {\n    super.emit(ev, ...args);\n    return this;\n  }\n  /**\r\n   * Emits a reserved event.\r\n   *\r\n   * This method is `protected`, so that only a class extending\r\n   * `StrictEventEmitter` can emit its own reserved events.\r\n   *\r\n   * @param ev Reserved event name\r\n   * @param args Arguments to emit along with the event\r\n   */\n\n\n  emitReserved(ev, ...args) {\n    super.emit(ev, ...args);\n    return this;\n  }\n  /**\r\n   * Returns the listeners listening to an event.\r\n   *\r\n   * @param event Event name\r\n   * @returns Array of listeners subscribed to `event`\r\n   */\n\n\n  listeners(event) {\n    return super.listeners(event);\n  }\n\n}\n\nexports.StrictEventEmitter = StrictEventEmitter;","map":null,"metadata":{},"sourceType":"script"}