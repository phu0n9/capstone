{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: !0\n}), exports.configureArc = exports.configureTickData = exports.configureTicks = exports.configureScale = void 0;\n\nvar _memoizeOne = _interopRequireDefault(require(\"memoize-one\")),\n    _d = require(\"d3\"),\n    _util = require(\"../util\"),\n    configureScale = (0, _memoizeOne[\"default\"])(_configureScale);\n\nexports.configureScale = configureScale;\nvar configureTicks = (0, _memoizeOne[\"default\"])(_configureTicks);\nexports.configureTicks = configureTicks;\nvar configureTickData = (0, _memoizeOne[\"default\"])(_configureTickData);\nexports.configureTickData = configureTickData;\nvar configureArc = (0, _memoizeOne[\"default\"])(_configureArc);\nexports.configureArc = configureArc;\n\nfunction _configureScale(a) {\n  return (0, _util.calculateScale)({\n    min: a.minValue,\n    max: a.maxValue,\n    segments: a.maxSegmentLabels\n  });\n}\n\nfunction _configureTicks(a) {\n  var b = configureScale(a),\n      c = (0, _util.calculateTicks)(b, {\n    min: a.minValue,\n    max: a.maxValue,\n    segments: a.maxSegmentLabels\n  });\n  return 0 < a.customSegmentStops.length && 0 !== a.maxSegmentLabels && (c = a.customSegmentStops), c;\n}\n\nfunction _configureTickData(a) {\n  var b = (0, _d.range)(a.majorTicks).map(function () {\n    return 1 / a.majorTicks;\n  }),\n      c = (0, _util.calculateSegmentStops)({\n    tickData: b,\n    customSegmentStops: a.customSegmentStops,\n    min: a.minValue,\n    max: a.maxValue\n  });\n  return c;\n}\n\nfunction _configureArc(a) {\n  var b = configureTickData(a),\n      c = a.maxAngle - a.minAngle,\n      d = a.width / 2,\n      e = (0, _d.arc)().innerRadius(d - a.ringWidth - a.ringInset).outerRadius(d - a.ringInset).startAngle(function (e, d) {\n    var f = (0, _util.sumArrayTill)(b, d);\n    return (0, _util.deg2rad)(a.minAngle + f * c);\n  }).endAngle(function (e, d) {\n    var f = (0, _util.sumArrayTill)(b, d + 1);\n    return (0, _util.deg2rad)(a.minAngle + f * c);\n  });\n  return e;\n}","map":null,"metadata":{},"sourceType":"script"}