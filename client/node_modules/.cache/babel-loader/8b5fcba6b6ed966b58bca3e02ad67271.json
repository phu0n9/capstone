{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport Pusher from 'pusher-js';\nexport default function InfinityScroll(pageNumber, keypress, keyword, selection) {\n  _s();\n\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  const [inventory, setInventory] = useState([]);\n  const [hasMore, setHasMore] = useState(false);\n  const heroku = 'https://schaeffler.herokuapp.com/inventory';\n  useEffect(() => {\n    const pusher = new Pusher('2ccb32686bdc0f96f50a', {\n      'cluster': 'ap1',\n      encrypted: true\n    });\n    const channel = pusher.subscribe('tasks');\n    channel.bind('inserted', function () {\n      if (keypress === true && keyword != null) {} else {}\n    });\n    return () => channel.unbind('inserted');\n  }, []);\n\n  const refresh = () => {\n    setLoading(true);\n    setError(false);\n\n    if (keypress === true && keyword != null) {} else {\n      axios({\n        method: 'GET',\n        url: 'http://localhost:5000/inventory',\n        params: {\n          page: pageNumber\n        }\n      }).then(res => {\n        setInventory(prevInventory => {\n          return [...new Set([...prevInventory, ...res.data.map(i => i)])];\n        });\n        setHasMore(res.data.length > 0);\n        setLoading(false);\n      }).catch(e => {\n        setError(true);\n        console.log('Error: ' + e);\n      });\n    }\n  };\n\n  useEffect(refresh, [pageNumber]);\n  return {\n    loading,\n    hasMore,\n    error,\n    inventory\n  };\n}\n\n_s(InfinityScroll, \"Jiq12qQD19nvgYdXweAbJ8Sdg38=\");\n\n_c = InfinityScroll;\n\nvar _c;\n\n$RefreshReg$(_c, \"InfinityScroll\");","map":{"version":3,"sources":["C:/Users/Admin/Downloads/capstone/schaeffler/client/src/InfinityScroll.js"],"names":["useEffect","useState","axios","Pusher","InfinityScroll","pageNumber","keypress","keyword","selection","loading","setLoading","error","setError","inventory","setInventory","hasMore","setHasMore","heroku","pusher","encrypted","channel","subscribe","bind","unbind","refresh","method","url","params","page","then","res","prevInventory","Set","data","map","i","length","catch","e","console","log"],"mappings":";;AAAA,SAAQA,SAAR,EAAkBC,QAAlB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAEA,eAAe,SAASC,cAAT,CAAwBC,UAAxB,EAAmCC,QAAnC,EAA4CC,OAA5C,EAAoDC,SAApD,EAA+D;AAAA;;AAC1E,QAAM,CAACC,OAAD,EAASC,UAAT,IAAuBT,QAAQ,CAAC,IAAD,CAArC;AACA,QAAM,CAACU,KAAD,EAAOC,QAAP,IAAmBX,QAAQ,CAAC,KAAD,CAAjC;AACA,QAAM,CAACY,SAAD,EAAWC,YAAX,IAA2Bb,QAAQ,CAAC,EAAD,CAAzC;AACA,QAAM,CAACc,OAAD,EAASC,UAAT,IAAuBf,QAAQ,CAAC,KAAD,CAArC;AACA,QAAMgB,MAAM,GAAG,4CAAf;AAEAjB,EAAAA,SAAS,CAAC,MAAK;AACX,UAAMkB,MAAM,GAAG,IAAIf,MAAJ,CAAW,sBAAX,EAAkC;AAC7C,iBAAU,KADmC;AAE7CgB,MAAAA,SAAS,EAAC;AAFmC,KAAlC,CAAf;AAIA,UAAMC,OAAO,GAAGF,MAAM,CAACG,SAAP,CAAiB,OAAjB,CAAhB;AACAD,IAAAA,OAAO,CAACE,IAAR,CAAa,UAAb,EAAwB,YAAU;AAC9B,UAAGhB,QAAQ,KAAK,IAAb,IAAqBC,OAAO,IAAI,IAAnC,EAAwC,CAEvC,CAFD,MAGK,CAEJ;AAEJ,KARD;AASA,WAAO,MAAMa,OAAO,CAACG,MAAR,CAAe,UAAf,CAAb;AACH,GAhBQ,EAgBP,EAhBO,CAAT;;AAkBA,QAAMC,OAAO,GAAG,MAAK;AACjBd,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,IAAAA,QAAQ,CAAC,KAAD,CAAR;;AACA,QAAGN,QAAQ,KAAK,IAAb,IAAqBC,OAAO,IAAI,IAAnC,EAAwC,CAEvC,CAFD,MAGI;AACAL,MAAAA,KAAK,CAAC;AACFuB,QAAAA,MAAM,EAAC,KADL;AAEFC,QAAAA,GAAG,EAAE,iCAFH;AAGFC,QAAAA,MAAM,EAAC;AAACC,UAAAA,IAAI,EAACvB;AAAN;AAHL,OAAD,CAAL,CAKCwB,IALD,CAKMC,GAAG,IAAI;AACThB,QAAAA,YAAY,CAACiB,aAAa,IAAG;AACzB,iBAAO,CAAC,GAAG,IAAIC,GAAJ,CAAQ,CAAC,GAAGD,aAAJ,EAAkB,GAAGD,GAAG,CAACG,IAAJ,CAASC,GAAT,CAAaC,CAAC,IAAIA,CAAlB,CAArB,CAAR,CAAJ,CAAP;AACH,SAFW,CAAZ;AAGAnB,QAAAA,UAAU,CAACc,GAAG,CAACG,IAAJ,CAASG,MAAT,GAAkB,CAAnB,CAAV;AACA1B,QAAAA,UAAU,CAAC,KAAD,CAAV;AACH,OAXD,EAYC2B,KAZD,CAYOC,CAAC,IAAG;AACP1B,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACA2B,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAUF,CAAtB;AACH,OAfD;AAgBH;AACJ,GAxBD;;AA0BAtC,EAAAA,SAAS,CAAEwB,OAAF,EAAW,CAACnB,UAAD,CAAX,CAAT;AAEA,SAAO;AAACI,IAAAA,OAAD;AAASM,IAAAA,OAAT;AAAiBJ,IAAAA,KAAjB;AAAuBE,IAAAA;AAAvB,GAAP;AACH;;GAtDuBT,c;;KAAAA,c","sourcesContent":["import {useEffect,useState} from 'react'\r\nimport axios from 'axios'\r\nimport Pusher from 'pusher-js'\r\n\r\nexport default function InfinityScroll(pageNumber,keypress,keyword,selection) {\r\n    const [loading,setLoading] = useState(true)\r\n    const [error,setError] = useState(false)\r\n    const [inventory,setInventory] = useState([])\r\n    const [hasMore,setHasMore] = useState(false)       \r\n    const heroku = 'https://schaeffler.herokuapp.com/inventory'\r\n    \r\n    useEffect(() =>{\r\n        const pusher = new Pusher('2ccb32686bdc0f96f50a',{\r\n            'cluster':'ap1',\r\n            encrypted:true\r\n        })\r\n        const channel = pusher.subscribe('tasks')\r\n        channel.bind('inserted',function(){\r\n            if(keypress === true && keyword != null){\r\n\r\n            }\r\n            else {\r\n\r\n            }\r\n            \r\n        })\r\n        return () => channel.unbind('inserted')\r\n    },[])\r\n\r\n    const refresh = () =>{\r\n        setLoading(true)\r\n        setError(false)\r\n        if(keypress === true && keyword != null){\r\n\r\n        }\r\n        else{\r\n            axios({\r\n                method:'GET',\r\n                url: 'http://localhost:5000/inventory',\r\n                params:{page:pageNumber}\r\n            })\r\n            .then(res => {\r\n                setInventory(prevInventory =>{\r\n                    return [...new Set([...prevInventory,...res.data.map(i => i)])]\r\n                })\r\n                setHasMore(res.data.length > 0)\r\n                setLoading(false)\r\n            })\r\n            .catch(e =>{\r\n                setError(true)\r\n                console.log('Error: '+e)\r\n            })\r\n        }\r\n    }\r\n\r\n    useEffect((refresh),[pageNumber])\r\n\r\n    return {loading,hasMore,error,inventory}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}