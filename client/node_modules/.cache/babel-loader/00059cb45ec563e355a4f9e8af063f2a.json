{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport Pusher from 'pusher-js';\nimport { useAuth0 } from '@auth0/auth0-react';\n\nrequire('dotenv').config();\n\nexport default function InfinityScroll(pageNumber, keyword, selection) {\n  _s();\n\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  const [inventory, setInventory] = useState([]);\n  const [hasMore, setHasMore] = useState(false);\n  const [change, setChange] = useState(false);\n  const heroku = 'https://schaeffler.herokuapp.com/';\n  const {\n    isAuthenticated,\n    getAccessTokenSilently\n  } = useAuth0(); // 'http://localhost:5000/inventory'\n\n  useEffect(() => {\n    async function fetchApi(URL, paramsDict) {\n      if (isAuthenticated) {\n        const token = await getAccessTokenSilently();\n        await axios({\n          method: 'GET',\n          url: URL,\n          params: paramsDict,\n          headers: {\n            authorization: `Bearer ${token}`\n          }\n        }).then(res => {\n          setInventory(() => {\n            return [...new Set([...'', ...res.data.map(i => i)])];\n          }); // setHasMore(res.data.length > 0)\n          // setLoading(false)\n        }).catch(e => {\n          setError(true);\n          console.log('Error: ' + e);\n        });\n      }\n    }\n\n    const pusher = new Pusher(process.env.REACT_APP_PUSHER_KEY, {\n      'cluster': process.env.REACT_APP_PUSHER_CLUSTER,\n      forceTLS: true\n    });\n    const channel = pusher.subscribe('tasks');\n    channel.bind('inserted', function () {\n      // fetchApi('http://localhost:5000/inventory',{page:5}) //change here\n      fetchApi(heroku + 'inventory', {\n        page: 5\n      }); //change here\n\n      setChange(true);\n    });\n\n    if (keyword !== undefined) {\n      switch (selection) {\n        case \"location\":\n          // fetchApi('http://localhost:5000/sort/sortByLocation',{location:keyword}) //change here\n          fetchApi(heroku + 'sort/sortByLocation', {\n            location: keyword\n          }); //change here\n\n          break;\n\n        case \"userId\":\n          // fetchApi('http://localhost:5000/sort/sortByUserId',{userId:keyword}) //change here\n          fetchApi(heroku + 'sort/sortByUserId', {\n            userId: keyword\n          }); //change here\n\n          break;\n\n        case \"date\":\n          fetchApi('http://localhost:5000/sort/sortByTime', {\n            time: keyword\n          }); //change here\n          // fetchApi(heroku+'sort/sortByTime',{time:keyword}) //change here\n\n          break;\n\n        default:\n          break;\n      }\n    }\n\n    return () => channel.unbind('inserted');\n  }, [isAuthenticated, getAccessTokenSilently, keyword, selection]);\n  useEffect(() => {\n    async function getPages() {\n      if (isAuthenticated) {\n        const token = await getAccessTokenSilently();\n        await axios({\n          method: 'GET',\n          url: 'http://localhost:5000/inventory',\n          //change here\n          // url: heroku+'inventory', //change here\n          params: {\n            page: pageNumber\n          },\n          headers: {\n            authorization: `Bearer ${token}`\n          }\n        }).then(res => {\n          setInventory(prevInventory => {\n            return [...new Set([...prevInventory, ...res.data.map(i => i)])];\n          });\n          setHasMore(res.data.length > 0);\n          setLoading(false);\n          setChange(false);\n        }).catch(e => {\n          setError(true);\n          console.log('Error: ' + e);\n        });\n      }\n    }\n\n    setLoading(true);\n    setError(false);\n\n    if (keyword === '') {\n      getPages();\n    }\n  }, [pageNumber, keyword, isAuthenticated, getAccessTokenSilently]);\n  return {\n    loading,\n    hasMore,\n    error,\n    inventory,\n    change\n  };\n}\n\n_s(InfinityScroll, \"fnS0+hjd9bU2CiqsYQxen+/zt38=\", false, function () {\n  return [useAuth0];\n});\n\n_c = InfinityScroll;\n\nvar _c;\n\n$RefreshReg$(_c, \"InfinityScroll\");","map":{"version":3,"sources":["C:/Users/Admin/Downloads/capstone/schaeffler/client/src/InfinityScroll.js"],"names":["useEffect","useState","axios","Pusher","useAuth0","require","config","InfinityScroll","pageNumber","keyword","selection","loading","setLoading","error","setError","inventory","setInventory","hasMore","setHasMore","change","setChange","heroku","isAuthenticated","getAccessTokenSilently","fetchApi","URL","paramsDict","token","method","url","params","headers","authorization","then","res","Set","data","map","i","catch","e","console","log","pusher","process","env","REACT_APP_PUSHER_KEY","REACT_APP_PUSHER_CLUSTER","forceTLS","channel","subscribe","bind","page","undefined","location","userId","time","unbind","getPages","prevInventory","length"],"mappings":"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","sourcesContent":["import {useEffect,useState} from 'react'\r\nimport axios from 'axios'\r\nimport Pusher from 'pusher-js'\r\nimport {useAuth0} from '@auth0/auth0-react'\r\nrequire('dotenv').config()\r\n\r\nexport default function InfinityScroll(pageNumber,keyword,selection) {\r\n    const [loading,setLoading] = useState(true)\r\n    const [error,setError] = useState(false)\r\n    const [inventory,setInventory] = useState([])\r\n    const [hasMore,setHasMore] = useState(false)       \r\n    const [change,setChange] = useState(false)\r\n    const heroku = 'https://schaeffler.herokuapp.com/'\r\n    const {isAuthenticated,getAccessTokenSilently} = useAuth0()\r\n\r\n   \r\n    // 'http://localhost:5000/inventory'\r\n    useEffect(() =>{\r\n        async function fetchApi(URL,paramsDict){\r\n            if(isAuthenticated){\r\n                const token = await getAccessTokenSilently()\r\n                await axios({\r\n                    method:'GET',\r\n                    url: URL,\r\n                    params:paramsDict,\r\n                    headers: {\r\n                        authorization:`Bearer ${token}`\r\n                    }\r\n                })\r\n                .then(res => {\r\n                    setInventory(() =>{\r\n                        return [...new Set([...'',...res.data.map(i => i)])]\r\n                    })\r\n                    // setHasMore(res.data.length > 0)\r\n                    // setLoading(false)\r\n                })\r\n                .catch(e =>{\r\n                    setError(true)\r\n                    console.log('Error: '+e)\r\n                })\r\n            }\r\n        }    \r\n        const pusher = new Pusher(process.env.REACT_APP_PUSHER_KEY,{\r\n            'cluster':process.env.REACT_APP_PUSHER_CLUSTER,\r\n            forceTLS: true,\r\n        })\r\n        const channel = pusher.subscribe('tasks')\r\n        channel.bind('inserted',function(){\r\n            // fetchApi('http://localhost:5000/inventory',{page:5}) //change here\r\n            fetchApi(heroku+'inventory',{page:5}) //change here\r\n            setChange(true)\r\n        })\r\n        if(keyword !== undefined){\r\n            switch(selection){\r\n                case \"location\":\r\n                    // fetchApi('http://localhost:5000/sort/sortByLocation',{location:keyword}) //change here\r\n                    fetchApi(heroku+'sort/sortByLocation',{location:keyword}) //change here\r\n\r\n                    break\r\n                case \"userId\":\r\n                    // fetchApi('http://localhost:5000/sort/sortByUserId',{userId:keyword}) //change here\r\n                    fetchApi(heroku+'sort/sortByUserId',{userId:keyword}) //change here\r\n                    break\r\n                case \"date\":\r\n                    fetchApi('http://localhost:5000/sort/sortByTime',{time:keyword}) //change here\r\n                    // fetchApi(heroku+'sort/sortByTime',{time:keyword}) //change here\r\n                    break\r\n                default:\r\n                    break\r\n            }\r\n        }\r\n        return () => channel.unbind('inserted')\r\n    },[isAuthenticated,getAccessTokenSilently,keyword,selection])\r\n\r\n    useEffect(() =>{\r\n        async function getPages(){\r\n            if(isAuthenticated){\r\n                const token = await getAccessTokenSilently()\r\n                await axios({\r\n                    method:'GET',\r\n                    url: 'http://localhost:5000/inventory', //change here\r\n                    // url: heroku+'inventory', //change here\r\n                    params:{page:pageNumber},\r\n                    headers:{\r\n                        authorization:`Bearer ${token}`\r\n                    }\r\n                })\r\n                .then(res => {\r\n                    setInventory(prevInventory =>{\r\n                        return [...new Set([...prevInventory,...res.data.map(i => i)])]\r\n                    })\r\n                        setHasMore(res.data.length > 0)\r\n                        setLoading(false)\r\n                        setChange(false)\r\n                })\r\n                .catch(e =>{\r\n                    setError(true)\r\n                    console.log('Error: '+e)\r\n                })\r\n            }\r\n        }\r\n        setLoading(true)\r\n        setError(false)\r\n        if(keyword === ''){\r\n            getPages()\r\n        }\r\n    },[pageNumber,keyword,isAuthenticated,getAccessTokenSilently])\r\n\r\n    return {loading,hasMore,error,inventory,change}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}