{"version":3,"file":"react-intersection-observer-hook.cjs.production.min.js","sources":["../src/useIntersectionObserver.ts","../src/useTrackVisibility.ts"],"sourcesContent":["import { useState, useCallback, useEffect, useRef } from 'react';\r\n\r\nconst DEFAULT_ROOT_MARGIN = '0px';\r\nconst DEFAULT_THRESHOLD = [0];\r\n\r\n// eslint-disable-next-line no-undef\r\nexport type IntersectionObserverHookArgs = IntersectionObserverInit;\r\n\r\nexport type IntersectionObserverHookRefCallbackNode = Element | null;\r\n\r\nexport type IntersectionObserverHookRefCallback = (\r\n  node: IntersectionObserverHookRefCallbackNode,\r\n) => void;\r\n\r\nexport type IntersectionObserverHookRootRefCallbackNode = IntersectionObserverHookArgs['root'];\r\n\r\nexport type IntersectionObserverHookRootRefCallback = (\r\n  node: IntersectionObserverHookRootRefCallbackNode,\r\n) => void;\r\n\r\nexport type IntersectionObserverHookResult = [\r\n  IntersectionObserverHookRefCallback,\r\n  {\r\n    entry: IntersectionObserverEntry | undefined;\r\n    rootRef: IntersectionObserverHookRootRefCallback;\r\n  },\r\n];\r\n\r\n// For more info:\r\n// https://developers.google.com/web/updates/2016/04/intersectionobserver\r\n// https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API\r\nfunction useIntersectionObserver(\r\n  args?: IntersectionObserverHookArgs,\r\n): IntersectionObserverHookResult {\r\n  const rootMargin = args?.rootMargin ?? DEFAULT_ROOT_MARGIN;\r\n  const threshold = args?.threshold ?? DEFAULT_THRESHOLD;\r\n\r\n  const nodeRef = useRef<IntersectionObserverHookRefCallbackNode>(null);\r\n  const rootRef = useRef<IntersectionObserverHookRootRefCallbackNode>(null);\r\n  const observerRef = useRef<IntersectionObserver | null>(null);\r\n\r\n  const [entry, setEntry] = useState<IntersectionObserverEntry>();\r\n\r\n  const unobserve = useCallback(() => {\r\n    // Disconnect the current observer (if there is one)\r\n    const currentObserver = observerRef.current;\r\n    currentObserver?.disconnect();\r\n    observerRef.current = null;\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      // We disconnect the observer on unmount to prevent memory leaks etc.\r\n      unobserve();\r\n    };\r\n  }, [unobserve]);\r\n\r\n  const observe = useCallback(() => {\r\n    const node = nodeRef.current;\r\n    if (node) {\r\n      const root = rootRef.current;\r\n      const options = { root, rootMargin, threshold };\r\n      // Create a observer for current \"node\" with given options.\r\n      const observer = new IntersectionObserver(([newEntry]) => {\r\n        setEntry(newEntry);\r\n      }, options);\r\n      observer.observe(node);\r\n      observerRef.current = observer;\r\n    }\r\n  }, [rootMargin, threshold]);\r\n\r\n  const initializeObserver = useCallback(() => {\r\n    unobserve();\r\n    observe();\r\n  }, [observe, unobserve]);\r\n\r\n  const refCallback = useCallback<IntersectionObserverHookRefCallback>(\r\n    (node) => {\r\n      nodeRef.current = node;\r\n      initializeObserver();\r\n    },\r\n    [initializeObserver],\r\n  );\r\n\r\n  const rootRefCallback = useCallback<IntersectionObserverHookRootRefCallback>(\r\n    (rootNode) => {\r\n      rootRef.current = rootNode;\r\n      initializeObserver();\r\n    },\r\n    [initializeObserver],\r\n  );\r\n\r\n  return [refCallback, { entry, rootRef: rootRefCallback }];\r\n}\r\n\r\nexport default useIntersectionObserver;\r\n","import { useEffect, useState } from 'react';\r\nimport useIntersectionObserver, {\r\n  IntersectionObserverHookArgs,\r\n  IntersectionObserverHookResult,\r\n} from './useIntersectionObserver';\r\n\r\nexport type TrackVisibilityHookArgs = IntersectionObserverHookArgs;\r\n\r\nexport type TrackVisibilityHookResult = [\r\n  IntersectionObserverHookResult[0],\r\n  IntersectionObserverHookResult[1] & {\r\n    isVisible: boolean;\r\n    wasEverVisible: boolean;\r\n  },\r\n];\r\n\r\nfunction useTrackVisibility(\r\n  args?: IntersectionObserverHookArgs,\r\n): TrackVisibilityHookResult {\r\n  const [ref, result] = useIntersectionObserver(args);\r\n  const isVisible = Boolean(result.entry?.isIntersecting);\r\n  const [wasEverVisible, setWasEverVisible] = useState(isVisible);\r\n\r\n  useEffect(() => {\r\n    if (isVisible) {\r\n      setWasEverVisible(isVisible);\r\n    }\r\n  }, [isVisible]);\r\n\r\n  return [ref, { ...result, isVisible, wasEverVisible }];\r\n}\r\n\r\nexport default useTrackVisibility;\r\n"],"names":["DEFAULT_THRESHOLD","useIntersectionObserver","args","rootMargin","threshold","nodeRef","useRef","rootRef","observerRef","useState","entry","setEntry","unobserve","useCallback","currentObserver","current","disconnect","useEffect","observe","node","observer","IntersectionObserver","root","initializeObserver","rootNode","ref","result","isVisible","Boolean","_result$entry","isIntersecting","wasEverVisible","setWasEverVisible"],"mappings":"2FAGMA,EAAoB,CAAC,GA4B3B,SAASC,EACPC,WAEMC,iBAAaD,SAAAA,EAAMC,cAhCC,MAiCpBC,iBAAYF,SAAAA,EAAME,aAAaJ,EAE/BK,EAAUC,SAAgD,MAC1DC,EAAUD,SAAoD,MAC9DE,EAAcF,SAAoC,QAE9BG,aAAnBC,OAAOC,OAERC,EAAYC,eAAY,eAEtBC,EAAkBN,EAAYO,cACpCD,GAAAA,EAAiBE,aACjBR,EAAYO,QAAU,OACrB,IAEHE,aAAU,kBACD,WAELL,OAED,CAACA,QAEEM,EAAUL,eAAY,eACpBM,EAAOd,EAAQU,WACjBI,EAAM,KAIFC,EAAW,IAAIC,sBAAqB,YACxCV,UAHc,CAAEW,KADLf,EAAQQ,QACGZ,WAAAA,EAAYC,UAAAA,IAKpCgB,EAASF,QAAQC,GACjBX,EAAYO,QAAUK,KAEvB,CAACjB,EAAYC,IAEVmB,EAAqBV,eAAY,WACrCD,IACAM,MACC,CAACA,EAASN,UAkBN,CAhBaC,eAClB,SAACM,GACCd,EAAQU,QAAUI,EAClBI,MAEF,CAACA,IAWkB,CAAEb,MAAAA,EAAOH,QARNM,eACtB,SAACW,GACCjB,EAAQQ,QAAUS,EAClBD,MAEF,CAACA,kRCzEL,SACErB,WAEsBD,EAAwBC,GAAvCuB,OAAKC,OACNC,EAAYC,iBAAQF,EAAOhB,cAAPmB,EAAcC,kBACIrB,WAASkB,GAA9CI,OAAgBC,cAEvBf,aAAU,WACJU,GACFK,EAAkBL,KAEnB,CAACA,IAEG,CAACF,OAAUC,GAAQC,UAAAA,EAAWI,eAAAA"}